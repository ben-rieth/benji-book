// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Post {
    id        String @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    image     String?
    
    author    User @relation("createdPosts", fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String

    likedBy   Likes[]

    comments Comment[]

    @@unique([id, authorId])
}

model Comment {
    id       String @id @default(cuid())
    text     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId   String

    author   User? @relation(fields: [authorId], references: [id], onDelete: SetNull)
    authorId String?
}

model Follows {
    follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    followerId  String
    following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
    followingId String

    @@id([followerId, followingId])

    status String
}

model Likes {
    id      String  @id @default(cuid())
    user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String?
    post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId  String

    unliked Boolean @default(false)
}

model User {
    id            String    @id @default(cuid()) 
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    posts         Post[]    @relation("createdPosts")
    comments      Comment[]

    likes         Likes[]

    followedBy    Follows[] @relation("following")
    following     Follows[] @relation("follower")
}

model Account {
    id                String  @id @default(cuid()) 
    userId            String  
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String   
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
